{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///ngx-click-to-edit.umd.min.js","webpack:///webpack/bootstrap 51b4a15b4b8c346554ae?e4d9","webpack:///./src/ngx-click-to-edit.component.ts?8653","webpack:///./src/index.ts?08e1","webpack:///./~/base64-js/index.js?2add","webpack:///./~/buffer/index.js?1a55","webpack:///./~/buffer/~/isarray/index.js?1483","webpack:///./src/ngx-click-to-edit.css?3ed1","webpack:///./~/css-loader/lib/css-base.js?da04","webpack:///./src/ngx-click-to-edit.html?7783","webpack:///./~/ieee754/index.js?70fe","webpack:///./src/ngx-click-to-edit.css?84c4*","webpack:///(webpack)/buildin/global.js?3698","webpack:///external {\"root\":[\"ng\",\"core\"],\"commonjs\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"amd\":\"@angular/core\"}?ad34"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_11__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__decorate","decorators","target","key","desc","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","__metadata","k","v","metadata","core_1","NgxClickToEditComponent","field","unit","full","hideTrigger","type","show","onSave","EventEmitter","valid","set","original","ngAfterViewInit","makeEditable","cancelEditable","validate","onKey","event","callSave","emit","Input","Number","String","Boolean","Output","Component","selector","template","styles","placeHoldersCount","b64","len","Error","byteLength","toByteArray","j","tmp","placeHolders","arr","Arr","L","revLookup","charCodeAt","tripletToBase64","num","lookup","encodeChunk","uint8","start","end","output","push","join","fromByteArray","extraBytes","parts","len2","Uint8Array","Array","code","global","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","from","TypeError","ArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","fill","encoding","undefined","checked","string","isEncoding","actual","write","slice","fromArrayLike","array","byteOffset","obj","isBuffer","copy","buffer","isnan","isArray","data","toString","SlowBuffer","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","bidirectionalIndexOf","val","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","read","buf","indexSize","readUInt16BE","arrLength","valLength","foundIndex","found","hexWrite","offset","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","base64","Math","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","str","stringtrim","replace","INVALID_BASE64_RE","trim","units","Infinity","leadSurrogate","byteArray","hi","lo","src","dst","INSPECT_MAX_BYTES","foo","subarray","e","poolSize","_augment","Symbol","species","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","equals","inspect","match","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","cssWithMappingToString","item","useSourceMap","content","cssMapping","sourceMapping","toComment","sources","map","source","sourceRoot","sourceMap","JSON","stringify","mediaQuery","alreadyImportedModules","id","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2","result","g","Function","eval","window"],"mappings":"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","file":"ngx-click-to-edit.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngxClickToEdit\"] = factory(require(\"@angular/core\"));\n\telse\n\t\troot[\"ngxClickToEdit\"] = factory(root[\"ng\"][\"core\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_11__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngxClickToEdit\"] = factory(require(\"@angular/core\"));\n\telse\n\t\troot[\"ngxClickToEdit\"] = factory(root[\"ng\"][\"core\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_11__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(11);\r\nvar NgxClickToEditComponent = (function () {\r\n    function NgxClickToEditComponent() {\r\n        this.field = 'field';\r\n        this.unit = '';\r\n        this.full = false;\r\n        this.hideTrigger = false;\r\n        this.type = 'string';\r\n        this.show = false;\r\n        this.onSave = new core_1.EventEmitter();\r\n        this.valid = true;\r\n    }\r\n    Object.defineProperty(NgxClickToEditComponent.prototype, \"setField\", {\r\n        set: function (field) {\r\n            this.value = field;\r\n            this.original = this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    NgxClickToEditComponent.prototype.ngAfterViewInit = function () {\r\n        if (typeof this.value === 'string') {\r\n            this.type = 'string';\r\n        }\r\n        if (typeof this.value === 'number') {\r\n            this.type = 'number';\r\n        }\r\n    };\r\n    NgxClickToEditComponent.prototype.makeEditable = function (field) {\r\n        if (this.hideTrigger === true) {\r\n            this.show = true;\r\n        }\r\n        if (this.full === false && field === 'trigger') {\r\n            this.show = true;\r\n        }\r\n        else if (this.full === true) {\r\n            this.show = true;\r\n        }\r\n    };\r\n    NgxClickToEditComponent.prototype.cancelEditable = function () {\r\n        this.show = false;\r\n        this.value = this.original;\r\n    };\r\n    NgxClickToEditComponent.prototype.validate = function (value) {\r\n        this.valid = true;\r\n    };\r\n    NgxClickToEditComponent.prototype.onKey = function (event) {\r\n        if (event.key === 'Enter') {\r\n            this.callSave();\r\n        }\r\n    };\r\n    NgxClickToEditComponent.prototype.callSave = function () {\r\n        if (this.valid) {\r\n            this.onSave.emit({ field: this.field, value: this.value });\r\n            this.show = false;\r\n        }\r\n    };\r\n    return NgxClickToEditComponent;\r\n}());\r\n__decorate([\r\n    core_1.Input('min'),\r\n    __metadata(\"design:type\", Number)\r\n], NgxClickToEditComponent.prototype, \"min\", void 0);\r\n__decorate([\r\n    core_1.Input('max'),\r\n    __metadata(\"design:type\", Number)\r\n], NgxClickToEditComponent.prototype, \"max\", void 0);\r\n__decorate([\r\n    core_1.Input('field'),\r\n    __metadata(\"design:type\", String)\r\n], NgxClickToEditComponent.prototype, \"field\", void 0);\r\n__decorate([\r\n    core_1.Input('unit'),\r\n    __metadata(\"design:type\", String)\r\n], NgxClickToEditComponent.prototype, \"unit\", void 0);\r\n__decorate([\r\n    core_1.Input('full'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgxClickToEditComponent.prototype, \"full\", void 0);\r\n__decorate([\r\n    core_1.Input('hideTrigger'),\r\n    __metadata(\"design:type\", Boolean)\r\n], NgxClickToEditComponent.prototype, \"hideTrigger\", void 0);\r\n__decorate([\r\n    core_1.Input('type'),\r\n    __metadata(\"design:type\", String)\r\n], NgxClickToEditComponent.prototype, \"type\", void 0);\r\n__decorate([\r\n    core_1.Input('value'),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], NgxClickToEditComponent.prototype, \"setField\", null);\r\n__decorate([\r\n    core_1.Output(),\r\n    __metadata(\"design:type\", core_1.EventEmitter)\r\n], NgxClickToEditComponent.prototype, \"onSave\", void 0);\r\nNgxClickToEditComponent = __decorate([\r\n    core_1.Component({\r\n        selector: 'ngx-click-to-edit',\r\n        template: __webpack_require__(7),\r\n        styles: [__webpack_require__(9)]\r\n    })\r\n], NgxClickToEditComponent);\r\nexports.NgxClickToEditComponent = NgxClickToEditComponent;\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(0));\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(2)\nvar ieee754 = __webpack_require__(8)\nvar isArray = __webpack_require__(4)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(6)(undefined);\n// imports\n\n\n// module\nexports.push([module.i, \".click-to-edit {\\n}\\n\\n.selectable {\\n    cursor: pointer;\\n}\\n\\n.ndv-comp {\\n    position: relative;\\n    overflow: hidden;\\n    min-width: 20px;\\n    border-radius: 3px;\\n    cursor: default;\\n}\\n\\n.fa-pencil {\\n    float: left;\\n    padding-top: 2px;\\n}\\n\\n.click-to-edit-content {\\n    float: left;\\n}\\n\\n.click-to-edit-value {\\n    float: left;\\n    min-width: 33px;\\n    padding: 0 2px 0 8px;\\n    text-align: right;\\n}\\n\\n.click-to-edit-unit {\\n    float: left;\\n}\\n\\n.active-ndv {\\n    background-color: transparent;\\n}\\ninput {\\n    border-radius: 5px;\\n    box-shadow: none;\\n    min-width: 5px;\\n    color: #000;\\n}\\n.ndv-buttons {\\n    background-color: transparent;\\n    border-top: none;\\n    border-radius: 0 0 3px 3px;\\n    box-shadow: 0 3px 6px rgba(111,111,111,0.2);\\n    outline: none;\\n    padding: 3px;\\n    position: absolute;\\n    margin-left: 6px;\\n    z-index: 1;\\n}\\n.ndv-comp:hover {\\n}\\n.ndv-save {\\n    margin-right:3px;\\n}\\n.ndv-active {\\n    background-color: transparent;\\n}\\n.ng-invalid {\\n    background: #ffb8b8;\\n}\\n.err-bubble {\\n    position: absolute;\\n    margin: 16px 100px;\\n    border: 1px solid red;\\n    font-size: 14px;\\n    background: #ffb8b8;\\n    padding: 10px;\\n    border-radius: 7px;\\n}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(Buffer) {/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap) {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n  var base64 = new Buffer(JSON.stringify(sourceMap)).toString('base64');\n  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n  return '/*# ' + data + ' */';\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=\\\"click-to-edit\\\">\\n    <div class='ndv-comp' [ngClass]=\\\"{'ndv-active':show}\\\">\\n        <input *ngIf='show && type === \\\"string\\\"' [ngClass]=\\\"{'ng-invalid': invalid}\\\" (ngModelChange)=\\\"validate($event)\\\"\\n               type='text' [(ngModel)]='value' (keyup)=\\\"onKey($event)\\\"/>\\n        <input *ngIf='show && type === \\\"number\\\"' [ngClass]=\\\"{'ng-invalid': invalid}\\\" (ngModelChange)=\\\"validate($event)\\\"\\n               type='number' min=\\\"min\\\" max=\\\"max\\\" [(ngModel)]='value' (keyup)=\\\"onKey($event)\\\"/>\\n\\n        <div class='err-bubble' *ngIf=\\\"invalid\\\">{{error || \\\" must contain \\\" + min + \\\" to -\\\" + max +\\\" chars.\\\"}}</div>\\n\\n        <div *ngIf='!show'>\\n            <div *ngIf=\\\"hideTrigger === false\\\">\\n                <div #ref class=\\\"click-to-edit-content selectable\\\" (click)='makeEditable(\\\"trigger\\\")'><ng-content></ng-content></div>\\n                <i class=\\\"fa fa-pencil selectable\\\" (click)='makeEditable(\\\"trigger\\\")' *ngIf=\\\"ref.childNodes.length == 0\\\"></i>\\n            </div>\\n            <div class=\\\"click-to-edit-value\\\" [class.selectable]=\\\"full === true || hideTrigger === true\\\" (click)='makeEditable(\\\"value\\\")' [innerHTML]=\\\"value || 'empty'\\\"></div>\\n            <div class=\\\"click-to-edit-unit\\\" [class.selectable]=\\\"full === true || hideTrigger === true\\\" (click)='makeEditable(\\\"unit\\\")' *ngIf=\\\"unit !== ''\\\" [innerHTML]=\\\"unit\\\"></div>\\n        </div>\\n    </div>\\n    <div class='ndv-buttons' *ngIf='show'>\\n        <button class='btn-x-sm' (click)='callSave()'><i class=\\\"fa fa-check\\\"></i></button>\\n        <button class='btn-x-sm' (click)='cancelEditable()'><i class=\\\"fa fa-times\\\"></i></button>\\n    </div>\\n</div>\";\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n        var result = __webpack_require__(5);\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// ngx-click-to-edit.umd.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 51b4a15b4b8c346554ae","import { AfterViewInit, Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ngx-click-to-edit',\n    template: require('./ngx-click-to-edit.html'),\n    styles  : [require('./ngx-click-to-edit.css')]\n})\nexport class NgxClickToEditComponent implements AfterViewInit {\n    @Input('min') min: number;\n    @Input('max') max: number;\n    @Input('field') field: string           = 'field';\n    @Input('unit') unit: string             = '';\n    @Input('full') full: boolean            = false;\n    @Input('hideTrigger') hideTrigger: boolean = false;\n    @Input('type') type: string             = 'string';\n                  show: boolean             = false;\n                  value: any;\n\n    @Input('value')\n    set setField(field: string) {\n        this.value = field;\n        this.original = this.value;\n    }\n    private original: any;\n    @Output()\n    private onSave: EventEmitter<any>         = new EventEmitter();\n    private valid: boolean = true;\n\n    ngAfterViewInit(): void {\n        if (typeof this.value === 'string') {\n            this.type = 'string';\n        }\n        if (typeof this.value === 'number') {\n            this.type = 'number';\n        }\n    }\n\n    makeEditable(field: string): void {\n        if (this.hideTrigger === true) {\n            this.show = true;\n        }\n        if (this.full === false && field === 'trigger') {\n            this.show = true;\n        } else if (this.full === true) {\n            this.show = true;\n        }\n    }\n\n    cancelEditable(): void {\n        this.show = false;\n        this.value = this.original;\n    }\n\n    validate(value: any): void {\n        this.valid = true;\n    }\n\n    onKey(event: KeyboardEvent): void {\n        if (event.key === 'Enter') {\n            this.callSave();\n        }\n    }\n\n    callSave(): void {\n        if (this.valid) {\n            this.onSave.emit({field: this.field, value: this.value});\n            this.show = false;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/ngx-click-to-edit.component.ts","export * from './ngx-click-to-edit.component';\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/index.ts","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/base64-js/index.js\n// module id = 2\n// module chunks = 0 1","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/buffer/index.js\n// module id = 3\n// module chunks = 0 1","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/buffer/~/isarray/index.js\n// module id = 4\n// module chunks = 0 1","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \".click-to-edit {\\n}\\n\\n.selectable {\\n    cursor: pointer;\\n}\\n\\n.ndv-comp {\\n    position: relative;\\n    overflow: hidden;\\n    min-width: 20px;\\n    border-radius: 3px;\\n    cursor: default;\\n}\\n\\n.fa-pencil {\\n    float: left;\\n    padding-top: 2px;\\n}\\n\\n.click-to-edit-content {\\n    float: left;\\n}\\n\\n.click-to-edit-value {\\n    float: left;\\n    min-width: 33px;\\n    padding: 0 2px 0 8px;\\n    text-align: right;\\n}\\n\\n.click-to-edit-unit {\\n    float: left;\\n}\\n\\n.active-ndv {\\n    background-color: transparent;\\n}\\ninput {\\n    border-radius: 5px;\\n    box-shadow: none;\\n    min-width: 5px;\\n    color: #000;\\n}\\n.ndv-buttons {\\n    background-color: transparent;\\n    border-top: none;\\n    border-radius: 0 0 3px 3px;\\n    box-shadow: 0 3px 6px rgba(111,111,111,0.2);\\n    outline: none;\\n    padding: 3px;\\n    position: absolute;\\n    margin-left: 6px;\\n    z-index: 1;\\n}\\n.ndv-comp:hover {\\n}\\n.ndv-save {\\n    margin-right:3px;\\n}\\n.ndv-active {\\n    background-color: transparent;\\n}\\n.ng-invalid {\\n    background: #ffb8b8;\\n}\\n.err-bubble {\\n    position: absolute;\\n    margin: 16px 100px;\\n    border: 1px solid red;\\n    font-size: 14px;\\n    background: #ffb8b8;\\n    padding: 10px;\\n    border-radius: 7px;\\n}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/ngx-click-to-edit.css\n// module id = 5\n// module chunks = 0 1","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap) {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n  var base64 = new Buffer(JSON.stringify(sourceMap)).toString('base64');\n  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n  return '/*# ' + data + ' */';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader/lib/css-base.js\n// module id = 6\n// module chunks = 0 1","module.exports = \"<div class=\\\"click-to-edit\\\">\\n    <div class='ndv-comp' [ngClass]=\\\"{'ndv-active':show}\\\">\\n        <input *ngIf='show && type === \\\"string\\\"' [ngClass]=\\\"{'ng-invalid': invalid}\\\" (ngModelChange)=\\\"validate($event)\\\"\\n               type='text' [(ngModel)]='value' (keyup)=\\\"onKey($event)\\\"/>\\n        <input *ngIf='show && type === \\\"number\\\"' [ngClass]=\\\"{'ng-invalid': invalid}\\\" (ngModelChange)=\\\"validate($event)\\\"\\n               type='number' min=\\\"min\\\" max=\\\"max\\\" [(ngModel)]='value' (keyup)=\\\"onKey($event)\\\"/>\\n\\n        <div class='err-bubble' *ngIf=\\\"invalid\\\">{{error || \\\" must contain \\\" + min + \\\" to -\\\" + max +\\\" chars.\\\"}}</div>\\n\\n        <div *ngIf='!show'>\\n            <div *ngIf=\\\"hideTrigger === false\\\">\\n                <div #ref class=\\\"click-to-edit-content selectable\\\" (click)='makeEditable(\\\"trigger\\\")'><ng-content></ng-content></div>\\n                <i class=\\\"fa fa-pencil selectable\\\" (click)='makeEditable(\\\"trigger\\\")' *ngIf=\\\"ref.childNodes.length == 0\\\"></i>\\n            </div>\\n            <div class=\\\"click-to-edit-value\\\" [class.selectable]=\\\"full === true || hideTrigger === true\\\" (click)='makeEditable(\\\"value\\\")' [innerHTML]=\\\"value || 'empty'\\\"></div>\\n            <div class=\\\"click-to-edit-unit\\\" [class.selectable]=\\\"full === true || hideTrigger === true\\\" (click)='makeEditable(\\\"unit\\\")' *ngIf=\\\"unit !== ''\\\" [innerHTML]=\\\"unit\\\"></div>\\n        </div>\\n    </div>\\n    <div class='ndv-buttons' *ngIf='show'>\\n        <button class='btn-x-sm' (click)='callSave()'><i class=\\\"fa fa-check\\\"></i></button>\\n        <button class='btn-x-sm' (click)='cancelEditable()'><i class=\\\"fa fa-times\\\"></i></button>\\n    </div>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ngx-click-to-edit.html\n// module id = 7\n// module chunks = 0 1","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ieee754/index.js\n// module id = 8\n// module chunks = 0 1","\n        var result = require(\"!!../node_modules/css-loader/index.js!./ngx-click-to-edit.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ngx-click-to-edit.css\n// module id = 9\n// module chunks = 0 1","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 10\n// module chunks = 0 1","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[\"ng\",\"core\"],\"commonjs\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"amd\":\"@angular/core\"}\n// module id = 11\n// module chunks = 0 1"],"sourceRoot":""}